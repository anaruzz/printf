.\" Manpage for _printf.

.TH man 8 "24 October 2019" "1.0" "_printf man page"
.SH NAME
_printf \- Produce output according to a format
.SH SYNOPSIS
 int _printf(const char *format, ...);

 #include <stdarg.h>
 int _printf(const char *format, va_list obj);
.SH DESCRIPTION
The function _printf() produces output according to a format.
It writes the output under the control of a format string that specifies how following arguments are converted for output.

.br
.B Format of the format string
.br The format string is composed of zero or more directives: ordinary characters (not %), which are copied unchanged to the output stream, and conversion specifications, each of which results in fetching zero or more subsequent arguments. Each conversion specification is introduced by the character % with a conversion specifier following it.
The arguments must correspond properly with the conversion specifier. By default, they are used in order (it is an error if there are too many arguments given).
.br
Conversion specifiers:
.br All conversion specifiers are written right after the % character.
.br A conversion specifier is a character that specifies the type of conversion to be applied.

The conversion specifiers and their meanings are:
.TP
.B d, i
The int argument is converted to signed decimal notation with no difference in output if it's %d or %i.
.TP
.B c
The int argument is converted to an unsigned char, and the resulting character is written.
.TP
.B s
the char* argument is expected to be a pointer to an array of characters (pointer to a string). Characters from the array are written up to (but not including) the terminating null byte ('\\0').
.TP
.B %
No argument is converted. A '%' is written. The complete conversion specification is '%%'
.SH RETURN VALUE
Upon successful return, the function returns the number of characters printed (excluding the null byte used to end output to strings).
.br
If an output error is encountered, the function returns (-1).
.SH EXAMPLE
To print an integer 5
.br
_printf("%d", 5);

.br
To print a character called c
.br
char c = '-';
.br
_printf("%c", c);

To print a string called s
.br
char *s = "hello";
.br
_printf("%s", s);
.SH SEE ALSO
printf(1)
.SH AUTHORS
Atef Mechken and Ghofrane Abidi
